mean(timetoevent)
mean(event1$timetoevent)
mean(event1$timetoevent[event1$any_pex == 1])
summary(model_int)
e
e <- exp(1)
e^2.57
model_freq <- survreg(Surv(time = timetoevent, event = any_pex) ~ sex_cat + earliestvisitage + genotype, data = event1,
dist = "exponential")
summary(model_freq)
e^-0.0623
library(survival)
head(ovarian)
ov <- ovarian
View(ov)
rm(ov)
head(lung)
lung
lung <- lung
View(lung)
library(survival)
lung <- lun
lung <- lung
test <- read.csv("C:/Users/johnsra3/Downloads/housing.csv")
View(test)
install.packages("ggmap")
library(ggmap)
test$gglon <- rep(NA, nrow(test))
test$gglat <- rep(NA, nrow(test))
for (i in 1:2){
test$gglon[i] <- geocode(paste0(test$RegionName[i],", ",test$City[i],", ",test$State[i]))[1]
test$gglat[i] <- geocode(paste0(test$RegionName[i],", ",test$City[i],", ",test$State[i]))[2]
}
test$gglon
geocode(paste0(test$RegionName[1],", ",test$City[1],", ",test$State[1]))
test$gglon <- rep(NA, nrow(test))
test$gglat <- rep(NA, nrow(test))
for (i in 1:nrow(test)){
test$gglon[i] <- geocode(paste0(test$RegionName[i],", ",test$City[i],", ",test$State[i]))[1]
test$gglat[i] <- geocode(paste0(test$RegionName[i],", ",test$City[i],", ",test$State[i]))[2]
}
View(test[,c("City", "State", "lat", "lon")])
View(test[,c("City", "State", "gglat", "gglon")])
write.csv("C:/Users/johnsra3/Downloads/test.csv")
write.csv(test, "C:/Users/johnsra3/Downloads/test.csv")
test
write.csv(test, "C:/Users/johnsra3/Downloads/test.csv")
typeof(test)
test$RegionID
data.frame(test)
write.csv(data.frame(test), "C:/Users/johnsra3/Downloads/test.csv")
write.csv(as.matrix(test), "C:/Users/johnsra3/Downloads/test.csv")
as.matrix(test)
1-0.208
1-.0606
1-.7143
1-0.6504
1-0.3211
.3175
1-0.9882
0.0913
1-0.9326
1-0.4134
2.1039-1
1-0.9745
1-0.9199
1.0322-1
38000/800
1-0.9463
1-0.8723
1.0266-1
library(nlme)
source("C:/Repositories/bios6623-johnsra3/Project3/Code/Functions- Change Points and Bootstrap.R")
setwd("C:/Users/johnsra3/Documents/School/AdvancedData")
#blockr <- read.csv("blockrOutcome.csv", header = T)
animals <- read.csv("AnimalsOutcome.csv", header = T)
#logmem1 <- read.csv("LogMem1Outcome.csv", header = T)
View(boot.function)
source("C:/Repositories/bios6623-johnsra3/Project3/Code/Functions- Change Points and Bootstrap.R")
setwd("C:/Users/johnsra3/Documents/School/AdvancedData")
#blockr <- read.csv("blockrOutcome.csv", header = T)
animals <- read.csv("AnimalsOutcome.csv", header = T)
cps <- seq(from = -6, to = 2, by = 0.1)
animals$gender <- factor(animals$gender)
animals$demind <- factor(animals$demind)
animals$int <- as.numeric(as.character(animals$demind)) * animals$age_59
#Run the function on the dataset
cp.model <- cp.search_and_fit(id = animals$id, timeb4dem =animals$timeb4dem, age = animals$age_59,
demind = animals$demind, ses = animals$SES, gender = animals$gender,
y = animals$animals, cps = cps, int = animals$int)
summary(cp.model$model)
animals_cp <- cp.model$cp
animals$timemax <- animals$timeb4dem - animals_cp
animals$timecp <- ifelse(animals$timemax < 0, 0, animals$timemax)
animals[is.na(animals)] <- ""
animals.model <- lme(animals ~ age_59 + demind + age_59*demind + timemax + SES + gender, random = ~1|id,
correlation = corCAR1(form = ~age_59), method = "REML", data = animals)
summary(animals.model)$coeff$fixed
id <- animals$id
timeb4dem <- animals$timeb4dem
age_59 <- animals$age_59
demind <- animals$demind
ses <- animals$SES
gender <- animals$gender
y <- animals$animals
cps <- seq(from = -6, to = 2, by = 0.1)
int <- as.numeric(as.character(animals$demind)) * animals$age_59
dat <- cbind.data.frame(id, timeb4dem, age_59, demind, ses, gender, y, int)
niter <- 10
bootstraps <- matrix(NA, ncol = 10, nrow = niter)
for (j in 1:niter){
bootstraps[j, ] <- boot.function(ids = id, dat = dat, cps = cps)
print(j)
}
#changepoint
cp.search_and_fit<-function(id, y, diff, cps, ses, gender, age, demind, int){
#Place to store likelihoods from the CP search
ll<-data.frame(changepoint=rep(NA,length(cps)), ll=rep(NA,length(cps)))
#Search for the CP
for (i in 1:length(cps)){cp<-cps[i]
t2<-ifelse(diff>cp, diff-cp, 0)
cp.model<-lme(y~t2 + gender + ses +age+int+demind, random=~1|id,
correlation = corCAR1(form=~age), method="REML")
ll[i,]<-c(cp,logLik(cp.model))
}
plot(ll$changepoint, ll$ll, type='l', xlab='Change Point (years)', ylab='Log Likelihood')
#Find the max
cp<-ll[which(ll$ll==max(ll$ll)),'changepoint']
print(cp)
#Fit the final model
t2<-ifelse(diff>cp, diff-cp, 0)
cp.model<-lme(y~t2 + gender + ses +age+int+demind, random=~1|id,
correlation = corCAR1(form=~age), method="REML")
return(list(cp=cp, model=cp.model))}
#bootstrap
boot.function<-function(ids=outcomelogmemI$id, dat=outcomelogmemI,cps=cps){
#Step 1: Get a bootstrap sample
#Since we took a random sample of SUBJECTS, must sample subjects in our bootstrap
ids.u<-unique(ids)
boot.subjects<-sample(ids.u, length(ids.u), replace=T)
#Grab the data for each of the chosen subjects
boot.dat<-NULL
for (i in 1:length(ids.u)){ temp<-cbind(i, dat[ids==boot.subjects[i],])
boot.dat<-rbind(boot.dat, temp)
}
#should this be age or age_adjusted
boot.model <-cp.search_and_fit(id = boot.dat$i, y = boot.dat$y, diff = boot.dat$diff, cps = cps, ses= boot.dat$SES,
gender = boot.dat$gender,age = boot.dat$age,
demind = boot.dat$demind, int = boot.dat$int)
#Step 3: Save the estimates and CP's
#ADD ALL OF THE ESTIMATESSSSS
boot.rslt<-c(boot.model$cp,
confint(glht(boot.model $model, matrix(c(1,0, 0,0,0,0,0), nrow=1)))$confint[1],
confint(glht(boot.model $model, matrix(c(0,1, 0,0,0,0,0), nrow=1)))$confint[1],
confint(glht(boot.model $model, matrix(c(0,0, 1,0,0,0,0), nrow=1)))$confint[1],
confint(glht(boot.model $model, matrix(c(0,0, 0,1,0,0,0), nrow=1)))$confint[1],
confint(glht(boot.model $model, matrix(c(0,0, 0,0,1,0,0), nrow=1)))$confint[1],
confint(glht(boot.model $model, matrix(c(0,0, 0,0,0,1,0), nrow=1)))$confint[1],
confint(glht(boot.model $model, matrix(c(0,0, 0,0,0,0,1), nrow=1)))$confint[1],
confint(glht(boot.model $model, matrix(c(0,1, 1,0,0,0,0), nrow=1)))$confint[1], #slope after change point
confint(glht(boot.model $model, matrix(c(0,1, 0,0,0,0,0), nrow=1)))$confint[1]) #slope before change point
names(boot.rslt)<-c("Changepoint","Estimate of Intercept","Estimate of t2",
"Estimate of Gender", "Est of SES", "Est of Age", "Est of Int",
"Est of Demind",  "Slope1", "Slope2")
return(boot.rslt)
}
#blockr <- read.csv("blockrOutcome.csv", header = T)
animals <- read.csv("AnimalsOutcome.csv", header = T)
id <- animals$id
y <- animals$id
diff <- animals$timeb4dem
cps <- seq(from = -6, to = 2, by = 0.1)
ses <- animals$SES
gender <- animals$gender
demind <- animals$demind
int <- animals$demind * animals$age_59
age <- animals$age_59
maxie_test <- cp.search_and_fit(id, timeb4dem, age_59, demind, ses, gender, y, cps, int)
maxie_test <- cp.search_and_fit(id, y, diff, cps, ses, gender, age, demind, int)
library(nlme)
source("C:/Repositories/bios6623-johnsra3/Project3/Code/Functions- Change Points and Bootstrap.R")
setwd("C:/Users/johnsra3/Documents/School/AdvancedData")
#blockr <- read.csv("blockrOutcome.csv", header = T)
animals <- read.csv("AnimalsOutcome.csv", header = T)
#logmem1 <- read.csv("LogMem1Outcome.csv", heade
id <- animals$id
timeb4dem <- animals$timeb4dem
age_59 <- animals$age_59
demind <- animals$demind
ses <- animals$SES
gender <- animals$gender
y <- animals$animals
cps <- seq(from = -6, to = 2, by = 0.1)
int <- as.numeric(as.character(animals$demind)) * animals$age_59
dat <- cbind.data.frame(id, timeb4dem, age_59, demind, ses, gender, y, int)
niter <- 10
bootstraps <- matrix(NA, ncol = 10, nrow = niter)
for (j in 1:niter){
bootstraps[j, ] <- boot.function(ids = id, dat = dat, cps = cps)
print(j)
}
library(nlme)
source("C:/Repositories/bios6623-johnsra3/Project3/Code/Functions- Change Points and Bootstrap.R")
setwd("C:/Users/johnsra3/Documents/School/AdvancedData")
#blockr <- read.csv("blockrOutcome.csv", header = T)
animals <- read.csv("AnimalsOutcome.csv", header = T)
boot.function<-function(ids=animals$id, dat=animals, cps=cps){
#Step 1: Get a bootstrap sample
#Since we took a random sample of SUBJECTS, must sample subjects in our bootstrap
ids.u<-unique(ids)
boot.subjects<-sample(ids.u, length(ids.u), replace=T)
#Grab the data for each of the chosen subjects
boot.dat<-NULL
for (i in 1:length(ids.u)){ temp<-cbind(i, dat[ids==boot.subjects[i],])
boot.dat<-rbind(boot.dat, temp)
}
#Step 2: Repeat the analysis on the bootstrap sample
boot.model <-cp.search_and_fit(patid = as.character(boot.dat$id),
t1 = boot.dat$age_Adj,
y = boot.dat$animals,
cps = cps,
ses = boot.dat$SES,
gender = as.factor(boot.dat$gender),
demind = as.factor(boot.dat$demind),
ageDiff = ifelse(is.na(boot.dat$ageDiff),0,boot.dat$ageDiff))
#Step 3: Save the estimates and CP's
boot.rslt<-c(boot.model$cp,
confint(glht(boot.model $model, matrix(c(0,1, 1,0,0,0,0), nrow=1)))$confint[1], #slope after change point
confint(glht(boot.model $model, matrix(c(0,1, 0,0,0,0,0), nrow=1)))$confint[1], #slope before change point
boot.model$model$coefficients$fixed[1],
boot.model$model$coefficients$fixed[2],
boot.model$model$coefficients$fixed[3],
boot.model$model$coefficients$fixed[4],
boot.model$model$coefficients$fixed[5],
boot.model$model$coefficients$fixed[6],
boot.model$model$coefficients$fixed[7])
names(boot.rslt)<-c("CP","Slope1", "Slope2", "intercept", "t1", "t2", "gender", "ses", "demind", "interaction")
return(boot.rslt)
}
bootstraps<-matrix(NA, ncol=10, nrow=1000)
niter <- 10
bootstraps<-matrix(NA, ncol=10, nrow = niter)
for (j in 1:niter){
bootstraps[j,]<-boot.function(ids=animals$id, dat=animals, cps=cps)
print(j)
}
cps<-seq(-6,2,0.1)
#Create a function to search for change point
#and fit final change point model
cp.search_and_fit<-function(patid, t1, y, cps,ses,gender,demind,ageDiff){
#Place to store likelihoods from the CP search
ll<-data.frame(changepoint=rep(NA,length(cps)), ll=rep(NA,length(cps)))
#Search for the CP
for (i in 1:length(cps)){
cp<-cps[i]
t2<-ifelse(ageDiff>cp, ageDiff-cp, 0)
cp.model <- lme(y~t1+t2 + gender + ses + demind + demind*t1, random=~1|patid, correlation = corAR1(), method="REML")
#cp.model <- lme(y~t1+t2 + gender + ses + demind + demind*t1, random=~1|patid, correlation = corCAR1(form=~t1), method="REML")
#cp.model<-lme(y~t1+t2 + gender + ses + demind + demind*t1, random=~1|patid, method='ML')
ll[i,]<-c(cp,logLik(cp.model))
}
#Plot the likelihood
#plot(ll$changepoint, ll$ll, type='l', xlab='Change Point (years)', ylab='Log Likelihood')
#Find the max
cp<-ll[which(ll$ll==max(ll$ll)),'changepoint']
print(cp)
#Fit the final model
t2<-ifelse(ageDiff>cp, ageDiff-cp, 0)
cp.model<-lme(y~t1+t2 + gender + ses + demind + demind*t1, random=~1|patid)
return(list(cp=cp, model=cp.model))}
cp.search_and_fit(patid = animals$id, t1 = animals$age_59, y = animals$animals, cps = cps,
ses = animals$SES)
View(cp.search_and_fit)
cp.search_and_fit(patid = animals$id, t1 = animals$age_59, y = animals$animals, cps = cps,
ses = animals$SES, gender = animals$gender, demind = animals$demind, ageDiff = animals$timeb4dem)
boot.function<-function(ids=animals$id, dat=animals, cps=cps){
#Step 1: Get a bootstrap sample
#Since we took a random sample of SUBJECTS, must sample subjects in our bootstrap
ids.u<-unique(ids)
boot.subjects<-sample(ids.u, length(ids.u), replace=T)
#Grab the data for each of the chosen subjects
boot.dat<-NULL
for (i in 1:length(ids.u)){ temp<-cbind(i, dat[ids==boot.subjects[i],])
boot.dat<-rbind(boot.dat, temp)
}
#Step 2: Repeat the analysis on the bootstrap sample
boot.model <-cp.search_and_fit(patid = as.character(boot.dat$id),
t1 = boot.dat$age_Adj,
y = boot.dat$animals,
cps = cps,
ses = boot.dat$SES,
gender = as.factor(boot.dat$gender),
demind = as.factor(boot.dat$demind),
ageDiff = ifelse(is.na(boot.dat$ageDiff),0,boot.dat$ageDiff))
#Step 3: Save the estimates and CP's
boot.rslt<-c(boot.model$cp,
confint(glht(boot.model $model, matrix(c(0,1, 1,0,0,0,0), nrow=1)))$confint[1], #slope after change point
confint(glht(boot.model $model, matrix(c(0,1, 0,0,0,0,0), nrow=1)))$confint[1], #slope before change point
boot.model$model$coefficients$fixed[1],
boot.model$model$coefficients$fixed[2],
boot.model$model$coefficients$fixed[3],
boot.model$model$coefficients$fixed[4],
boot.model$model$coefficients$fixed[5],
boot.model$model$coefficients$fixed[6],
boot.model$model$coefficients$fixed[7])
names(boot.rslt)<-c("CP","Slope1", "Slope2", "intercept", "t1", "t2", "gender", "ses", "demind", "interaction")
return(boot.rslt)
}
niter <- 10
bootstraps<-matrix(NA, ncol=10, nrow = niter)
for (j in 1:niter){
bootstraps[j,]<-boot.function(ids=animals$id, dat=animals, cps=cps)
print(j)
}
patid  <- animals$id
t1 <- animals$age_59, y = animals$animals, cps = cps,
ses = animals$SES, gender = animals$gender, demind = animals$demind, ageDiff = animals$timeb4dem
t1 <- animals$age_59
y <- animals$animals
ses <- animals$SES
gender <- animals$gender
demind <-  animals$demind
ageDiff <- animals$timeb4dem
niter <- 10
bootstraps<-matrix(NA, ncol=10, nrow = niter)
for (j in 1:niter){
bootstraps[j,]<-boot.function(ids=animals$id, dat=animals, cps=cps)
print(j)
}
setwd("C:/Repositories/bios6623-johnsra3/Project3/Reports")
setwd("C:/Repositories/bios6623-johnsra3/Project3/Reports")
animals_bs <- read.csv("BootstrapWithAllEstimates.csv", header = T)
animals_bs <- animals_bs[, -1]
colnames(animals_bs) <-c("Changepoint","Estimate of Intercept","Estimate of TimeMax",
"Estimate of Gender", "Estimate of SES", "Estimate of Age_59",
"Estimate of Intrxn", "Estimate of Demind",  "Slope1", "Slope2")
bstab <- as.data.frame(matrix(data = NA, nrow = , ncol = 4))
colnames(bstab) <- c("Variable", "Change Point (likelihood)", "Change point (bootstrap)",
"Bootstrapped 95% CI")
bstab[1, 1] <- c("Animals")
bstab[1, 2] <- c(-3.9)
bstab[1, 3] <- round(mean(animals_bs[, 1]), 2)
bstab[1, 4] <- paste(paste(round(quantile(animals_bs[, 1], 0.025), 2), ",", sep = ""),
round(quantile(animals_bs[, 1], 0.975), 2))
bstab
write.csv(bstab, "C:/Repositories/bios6623-johnsra3/Project3/Reports/BootstrapSummaryTable.csv")
colnames(animals_bs)
setab <- as.data.frame(matrix(data = NA, nrow = 7))
bstab <- as.data.frame(matrix(data = NA, nrow = 1, ncol = 4))
colnames(bstab) <- c("Variable", "Change Point (likelihood)", "Change point (bootstrap)",
"Bootstrapped 95% CI")
bstab[1, 1] <- c("Animals")
bstab[1, 2] <- c(-3.9)
bstab[1, 3] <- round(mean(animals_bs[, 1]), 2)
bstab[1, 4] <- paste(paste(round(quantile(animals_bs[, 1], 0.025), 2), ",", sep = ""),
round(quantile(animals_bs[, 1], 0.975), 2))
bstab
colnames(setab) <- c("Variable", "Model Estimate", "Bootstrapped Standard Error", "p-value")
setab <- as.data.frame(matrix(data = NA, nrow = 7, ncol = 4))
colnames(setab) <- c("Variable", "Model Estimate", "Bootstrapped Standard Error", "p-value")
View(animals_bs)
setab[1:7, 1] <- colnames(animals_bs)[2:8]
mean(animals_bs[, 2])
apply(animals_bs[,2:8], mean)
;apply(animals_bs[,2:8], mean)
lapply(animals_bs[,2:8], mean)
setab[1:7, 1] <- lapply(animals_bs[, 2:8], round(mean), digits = 2)
setab[1:7, 1] <- lapply(animals_bs[, 2:8], round(mean, digits = 2))
View(setab)
View(setab)
setab[1:7, 2] <- lapply(animals_bs[, 2:8], round(mean(.), digits = 2))
setab[1:7, 2] <- round(mean(animals_bs[, 2:8]), digits = 2)
setab[1:7, 2] <- lapply(round(mean(animals_bs[, 2:8]), digits = 2))
lapply(animals_bs[,2:8], mean)
setab[1:7, 2] <- round(lapply(animals_bs[, 2:8], mean), digits = 2)
setab[1:7, 2] <- round(lapply(animals_bs[,2:8], mean), digits =2)
View(setab)
setab[1:7, 2] <- round(lapply(animals_bs[,2:8], mean), digits = 2)
lapply(animals_bs[,2:8], mean)
lapply(animals_bs[,2:8], mean)[1]
setab[1:7, 2] <- round(animals_bs[, 2], digits = 2)
setab[1:7, 2] <- round(mean(animals_bs[, 2]), digits = 2)
setab <- as.data.frame(matrix(data = NA, nrow = 7, ncol = 4))
colnames(setab) <- c("Variable", "Model Estimate", "Bootstrapped Standard Error", "p-value")
setab[1:7, 1] <- colnames(animals_bs)[2:8]
setab[1, 2] <- round(mean(animals_bs[, 2]), digits = 2)
setab[2, 2] <- round(mean(animals_bs[, 3]), digits = 2)
setab[3, 2] <- round(mean(animals_bs[, 4]), digits = 2)
setab[1, 2] <- round(mean(animals_bs[, 2]), digits = 2)
setab[2, 2] <- round(mean(animals_bs[, 3]), digits = 2)
setab[3, 2] <- round(mean(animals_bs[, 4]), digits = 2)
setab[4, 2] <- round(mean(animals_bs[, 5]), digits = 2)
setab[5, 2] <- round(mean(animals_bs[, 6]), digits = 2)
setab[6, 2] <- round(mean(animals_bs[, 7]), digits = 2)
setab[7, 2] <- round(mean(animals_bs[, 8]), digits = 2)
View(setab)
setab <- as.data.frame(matrix(data = NA, nrow = 7, ncol = 4))
colnames(setab) <- c("Variable", "Model Estimate", "Bootstrapped Standard Error", "p-value")
setab[1:7, 1] <- colnames(animals_bs)[2:8]
setab[1, 3] <- round(sd(animals_bs[, 2]), digits = 2)
setab[2, 3] <- round(sd(animals_bs[, 3]), digits = 2)
setab[3, 3] <- round(sd(animals_bs[, 4]), digits = 2)
setab[4, 3] <- round(sd(animals_bs[, 5]), digits = 2)
setab[5, 3] <- round(sd(animals_bs[, 6]), digits = 2)
setab[6, 3] <- round(sd(animals_bs[, 7]), digits = 2)
setab[7, 3] <- round(sd(animals_bs[, 8]), digits = 2)
library(nlme)
source("C:/Repositories/bios6623-johnsra3/Project3/Code/Functions- Change Points and Bootstrap.R")
setwd("C:/Users/johnsra3/Documents/School/AdvancedData")
#blockr <- read.csv("blockrOutcome.csv", header = T)
animals <- read.csv("AnimalsOutcome.csv", header = T)
cps <- seq(from = -6, to = 2, by = 0.1)
animals$gender <- factor(animals$gender)
animals$demind <- factor(animals$demind)
animals$int <- as.numeric(as.character(animals$demind)) * animals$age_59
#Run the function on the dataset
cp.model <- cp.search_and_fit(id = animals$id, timeb4dem =animals$timeb4dem, age = animals$age_59,
demind = animals$demind, ses = animals$SES, gender = animals$gender,
y = animals$animals, cps = cps, int = animals$int)
summary(cp.model$model)
animals_cp <- cp.model$cp
#cp = -3.9
animals$timemax <- animals$timeb4dem - animals_cp
animals$timecp <- ifelse(animals$timemax < 0, 0, animals$timemax)
animals[is.na(animals)] <- ""
animals.model <- lme(animals ~ age_59 + demind + age_59*demind + timemax + SES + gender, random = ~1|id,
correlation = corCAR1(form = ~age_59), method = "REML", data = animals)
summary(animals.model)$coeff$fixed
(df <- summary(animals.model)$coeff$fixed)
(df <- t(summary(animals.model)$coeff$fixed))
View(df)
(df <- t(as.data.frame((summary(animals.model)$coeff$fixed)))
View(df)
(df <- t(as.data.frame((summary(animals.model)$coeff$fixed))))
View(df)
summary(animals.model)$coeff$fixed
mmres <- summary(animals.model)$coeff$fixed
mmres <- as.data.frame(summary(animals.model)$coeff$fixed)
View(mmres)
animals.model <- lme(animals ~ age_59 + demind + age_59*demind + timemax + SES + gender, random = ~1|id,
correlation = corCAR1(form = ~age_59), method = "REML", data = animals)
mmres <- as.data.frame(summary(animals.model)$coeff$fixed)
View(mmres)
setwd("C:/Repositories/bios6623-johnsra3/Project3/Reports")
write.csv(mmres, "MixedModelResults.csv")
setwd("C:/Repositories/bios6623-johnsra3/Project3/Reports")
mmres <- read.csv("MixedModelResults.csv", header = T)
animals_bs <- read.csv("BootstrapWithAllEstimates.csv", header = T)
animals_bs <- animals_bs[, -1]
colnames(animals_bs) <-c("Changepoint","Estimate of Intercept","Estimate of TimeMax",
"Estimate of Gender", "Estimate of SES", "Estimate of Age_59",
"Estimate of Intrxn", "Estimate of Demind",  "Slope1", "Slope2")
source('C:/Repositories/bios6623-johnsra3/Project3/Code/Project 3 Summarize CP Bootstrap.R', echo=TRUE)
mean(animals_bs[, 1])
bstab <- as.data.frame(matrix(data = NA, nrow = 1, ncol = 4))
colnames(bstab) <- c("Variable", "Change Point (likelihood)", "Change point (bootstrap)",
"Bootstrapped 95% CI")
bstab[1, 1] <- c("Animals")
bstab[1, 2] <- c(-3.9)
bstab[1, 3] <- round(mean(animals_bs[, 1]), 2)
bstab[1, 4] <- paste(paste(round(quantile(animals_bs[, 1], 0.025), 2), ",", sep = ""),
round(quantile(animals_bs[, 1], 0.975), 2))
bstab
setab <- as.data.frame(matrix(data = NA, nrow = 7, ncol = 4))
colnames(setab) <- c("Variable", "Model Estimate", "Bootstrapped Standard Error", "p-value")
setab[1:7, 1] <- colnames(animals_bs)[2:8]
View(mmres)
setab[, 1]
mmres[, 1]
setab[1, 2] <- mmres$summary.animals.model..coeff.fixed[mmres$X == "(Intercept)"]
View(setab)
setab[1, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "(Intercept)"], 2)
View(setab)
setab[1, 3] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "Estimate of TimeMax"], 2)
setab[1, 3] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "timemax"], 2)
setab[1, 3] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "age_59"], 2)
setab[1, 4] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "age_59:demind1"], 2)
setab[, 1]
mmres[,1]
setab[1, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "(Intercept)"], 2)
setab[2, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "timemax"], 2)
setab[3, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "gender2"], 2)
setab[4, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "SES"], 2)
setab[5, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "age_59"], 2)
setab[6, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "age_59:demind1"], 2)
setab[7, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "demind1"], 2)
setab[1, 3] <- round(sd(animals_bs[, 2]), digits = 2)
setab[2, 3] <- round(sd(animals_bs[, 3]), digits = 2)
setab[3, 3] <- round(sd(animals_bs[, 4]), digits = 2)
setab[4, 3] <- round(sd(animals_bs[, 5]), digits = 2)
setab[5, 3] <- round(sd(animals_bs[, 6]), digits = 2)
setab[6, 3] <- round(sd(animals_bs[, 7]), digits = 2)
setab[7, 3] <- round(sd(animals_bs[, 8]), digits = 2)
View(setab)
setab[1, 2]/setab[1, 3]
pnorm(8.075)
1 - pnorm(setab[1, 2]/setab[1, 3])
setab[1, 4] <- round(1 - pnorm(setab[1, 2]/setab[1, 3]), digits = 4)
setab[1, 4] <- round(1 - pnorm(setab[1, 2]/setab[1, 3]), digits = 4)
setab[2, 4] <- round(1 - pnorm(setab[2, 2]/setab[2, 3]), digits = 4)
setab[3, 4] <- round(1 - pnorm(setab[3, 2]/setab[3, 3]), digits = 4)
setab[4, 4] <- round(1 - pnorm(setab[4, 2]/setab[4, 3]), digits = 4)
setab[5, 4] <- round(1 - pnorm(setab[5, 2]/setab[5, 3]), digits = 4)
setab[6, 4] <- round(1 - pnorm(setab[6, 2]/setab[6, 3]), digits = 4)
setab[7, 4] <- round(1 - pnorm(setab[7, 2]/setab[7, 3]), digits = 4)
View(setab)
setab
round(1 - pnorm(setab[2, 2]/setab[2, 3]), digits = 4)
setab[2, 2]/setab[2, 3])
setab[2, 2]/setab[2, 3]
pnorm(setab[2, 2]/setab[2, 3])
1 - pnorm(setab[2, 2]/setab[2, 3])
