beta1 ~ dnorm(0, 0.1)
}"
#Note before we run model:
event1.dat <- list(t = t,
N = nrow(event1),
is.censored = is.censored,
t.cen = t.cen,
trt = trt)
event1.jags <- jags.model(file = textConnection(event1_string),
data = event1.data)
#Note before we run model:
event1.data <- list(t = t,
N = nrow(event1),
is.censored = is.censored,
t.cen = t.cen,
trt = trt)
event1.jags <- jags.model(file = textConnection(event1_string),
data = event1.data)
event1.data <- list(t = t,
N = nrow(event1),
is.censored = is.censored,
t.cen = t.cen,
trt = trt)
event1.jags <- jags.model(file = textConnection(event1_string),
data = event1.data)
N <- nrow(event1)
event1.data <- list(t = t,
is.censored = is.censored,
t.cen = t.cen,
trt = trt)
event1.jags <- jags.model(file = textConnection(event1_string),
data = event1.data)
event1.data <- list(t = t,
N = nrow(event1),
is.censored = is.censored,
t.cen = t.cen,
trt = trt)
event1_string <- "model{
beta0 ~ dnorm(0, 0.001)
for(i in 1:N){
is.censored[i] ~ dinterval(t[i], t.cen[i])
t[i] ~ dexp(lambda[i])
lambda[i] <- exp(beta0)
}
}"
event1.data <- list(t = t,
N = nrow(event1),
is.censored = is.censored,
t.cen = t.cen,
trt = trt)
event1.jags <- jags.model(file = textConnection(event1_string),
data = event1.data)
event1.data <- list(t = t,
N = nrow(event1),
is.censored = is.censored,
t.cen = t.cen)
event1.jags <- jags.model(file = textConnection(event1_string),
data = event1.data)
event1_string <- "model{
for(i in 1:N){
is.censored[i] ~ dinterval(t[i], t.cen[i])
t[i] ~ dexp(lambda[i])
lambda[i] <- exp(beta0)
}
beta0 ~ dnorm(0, 0.001)
}"
event1.data <- list(t = t,
N = nrow(event1),
is.censored = is.censored,
t.cen = t.cen)
event1.jags <- jags.model(file = textConnection(event1_string),
data = event1.data)
tinits <- t + 5
is.na(tinits) <- data$status == 1
is.na(tinits) <- status == 1
initslist <- list(t = tinits)
library(rjags)
library(coda)
library(survival)
event1 <- read.csv("Z:/Data/DataCreated/TimeToFirstEvent.csv", header = T)
event1$genotype <- factor(event1$genotype, levels = c("0", "1", "2"))
#4 req. vectors for rjags survival: t, is.censored, t.cen, trt (a cov.)
#t includes the event or censoring times
(t <- event1$timetoevent)
#status is 1 if observed, 0 if censored
(status <- event1$any_pex)
#need to exclude t for censored obs
(is.na(t) <- status == 0)
#need an indicator telling us if it's censored (opposite of status, wh/ tells us if there's an event)
(is.censored <- 1 - status)
#t.cen is censoring time- WHAT DOES THIS MEAN?!?! why do we add 1? is this an arbitrary choice? could we make
#a better choice w/ that or do I just not understand what's going on here?
(t.cen <- t + status)
event1_string <- "model{
for(i in 1:N){
is.censored[i] ~ dinterval(t[i], t.cen[i])
t[i] ~ dexp(lambda[i])
lambda[i] <- exp(beta0)
}
beta0 ~ dnorm(0, 0.001)
}"
tinits <- t + 5 #why 5???
is.na(tinits) <- status == 1
event1.data <- list(t = t,
N = nrow(event1),
is.censored = is.censored,
t.cen = t.cen)
initslist <- list(t = tinits)
event1.jags <- jags.model(file = textConnection(event1_string),
inits = initslist,
data = event1.data)
event1_string <- "model{
for(j in 1:N){
is.censored[j] ~ dinterval(t[j], t.cen[j])
t[j] ~ dexp(lambda[j])
lambda[j] <- exp(beta0)
}
beta0 ~ dnorm(0, 0.001)
}"
tinits <- t + 5 #why 5???
is.na(tinits) <- status == 1
event1.data <- list(t = t,
N = nrow(event1),
is.censored = is.censored,
t.cen = t.cen)
initslist <- list(t = tinits)
event1.jags <- jags.model(file = textConnection(event1_string),
inits = initslist,
data = event1.data)
dim(event1)
dim(table(event1$sex_cat))
dim(table(event1$cffidno))
View(event1)
seedlings <- read.table("http://goo.gl/chMvEo", header = T)
head(seedlings)
#No censoring, every indiv had an event
seedlings$status <- 1
#Fit it in base R first
model.par <- survreg(Surv(seedlings$death) ~ 1, dist = "exponential")
summary(model.par)
#Get an estimate of mean time to death- same as mean(seedlings$death)
(mu <- exp(model.par$coeff))
#Now fit it in JAGS
new.t <- seq(0, 25, by = 0.5)
surv.data <- list(t.to.death = seedlings$death,
N = nrow(seedlings))
library(survival)
seedlings <- read.table("http://goo.gl/chMvEo", header = T)
head(seedlings)
#No censoring, every indiv had an event
seedlings$status <- 1
#Fit it in base R first
model.par <- survreg(Surv(seedlings$death) ~ 1, dist = "exponential")
summary(model.par)
#Get an estimate of mean time to death- same as mean(seedlings$death)
(mu <- exp(model.par$coeff))
#Now fit it in JAGS
surv.data <- list(t.to.death = seedlings$death,
N = nrow(seedlings))
survival_exp <- "model{
lambda ~ dgamma(0.01, 0.01)
for(t in 1:N){
t.to.death[t] ~ dexp(lambda)
}
mu <- 1/lambda
}"
model.jags <- jags.model(file = textConnection(survival_exp),
data = surv.data)
update(model.jags, 1000)
samp.jags <- coda.samples(model.jags,
variable.names = "lambda",
n.iter = 20000)
summary(samp.jags)
plot(samp.jags)
lung <- lung
head(lung)
#Survreg model
table(lung$status)
lung$event <- ifelse(lung$status == 2, 1, 0)
table(lung$event)
model_lung <- survreg(Surv(time = time, event = event) ~ 1, data = lung,
dist = "exponential")
summary(model_lung)
(mu <- exp(model_lung$coeff))
#RJAGS model
(t <- lung$time)
(status <- lung$event)
(is.na(t) <- status == 0)
(is.censored <- 1 - status)
(t.cen <- t + status)
event1_string <- "model{
for(j in 1:N){
is.censored[j] ~ dinterval(t[j], t.cen[j])
t[j] ~ dexp(lambda[j])
lambda[j] <- exp(beta0)
}
beta0 ~ dnorm(0, 0.01)
}"
tinits <- t + 5 #why 5???
is.na(tinits) <- status == 1
event1.data <- list(t = t,
N = nrow(lung),
is.censored = is.censored,
t.cen = t.cen)
initslist <- list(t = tinits)
lung.data <- list(t = t,
N = nrow(lung),
is.censored = is.censored,
t.cen = t.cen)
lung_string <- "model{
for(j in 1:N){
is.censored[j] ~ dinterval(t[j], t.cen[j])
t[j] ~ dexp(lambda[j])
lambda[j] <- exp(beta0)
}
beta0 ~ dnorm(0, 0.01)
}"
event1.jags <- jags.model(file = textConnection(lung_string),
inits = initslist,
data = lung)
lung.data <- list(t = t,
N = nrow(lung),
is.censored = is.censored,
t.cen = t.cen)
initslist <- list(t = tinits)
event1.jags <- jags.model(file = textConnection(lung_string),
inits = initslist,
data = lung)
event1.jags <- jags.model(file = textConnection(lung_string),
#inits = initslist,
data = lung)
lung.data <- list(t = t,
N = nrow(lung),
is.censored = is.censored,
t.cen = t.cen)
event1.jags <- jags.model(file = textConnection(lung_string),
inits = initslist,
data = lung.data)
event1.jags <- jags.model(file = textConnection(lung_string),
#inits = initslist,
data = lung.data)
#===================================================================#
# JAGS: Exponential hazard function model for time to first event
# Rachel Johnson
# Code started: 11/07/2017
# Last updated: 11/10/2017
#===================================================================#
#===================================================================#
# Import data and load libraries
#===================================================================#
library(rjags)
library(coda)
library(survival)
event1 <- read.csv("Z:/Data/DataCreated/TimeToFirstEvent.csv", header = T)
event1$genotype <- factor(event1$genotype, levels = c("0", "1", "2"))
#===================================================================#
# Fit survival model (intercept only) w/ JAGS w/ my data
#===================================================================#
#Going to try to follow along w/ online help w/:
#http://www.mas.ncl.ac.uk/~nmf16/teaching/mas8391/survival.pdf
#4 req. vectors for rjags survival: t, is.censored, t.cen, trt (a cov.)
#t includes the event or censoring times
(t <- event1$timetoevent)
#status is 1 if observed, 0 if censored
(status <- event1$any_pex)
#need to exclude t for censored obs
(is.na(t) <- status == 0)
#need an indicator telling us if it's censored (opposite of status, wh/ tells us if there's an event)
(is.censored <- 1 - status)
#t.cen is censoring time- WHAT DOES THIS MEAN?!?! why do we add 1? is this an arbitrary choice? could we make
#a better choice w/ that or do I just not understand what's going on here?
(t.cen <- t + status)
#try w/o a covariate at first-- can add in later! :)
# event1$I_sex <- ifelse(event1$sex_cat == "Female", 1, 0)
# trt <- event1$I_sex
event1_string <- "model{
for(j in 1:N){
is.censored[j] ~ dinterval(t[j], t.cen[j])
t[j] ~ dexp(lambda[j])
lambda[j] <- exp(beta0)
}
beta0 ~ dnorm(0, 0.001)
}"
#Note: dinterval(t[j], t.cen[j]) is just to give starting values > censoring time :)
tinits <- t + 5 #why 5???
is.na(tinits) <- status == 1
event1.data <- list(t = t,
N = nrow(event1),
is.censored = is.censored,
t.cen = t.cen)
initslist <- list(t = tinits)
event1.jags <- jags.model(file = textConnection(event1_string),
inits = initslist,
data = event1.data)
setwd("C:/Repositories/bios6623-johnsra3/Project3/Reports")
mmres <- read.csv("MixedModelResults.csv", header = T)
View(mmres)
library(nlme)
source("C:/Repositories/bios6623-johnsra3/Project3/Code/Functions- Change Points and Bootstrap.R")
setwd("C:/Users/johnsra3/Documents/School/AdvancedData")
#blockr <- read.csv("blockrOutcome.csv", header = T)
animals <- read.csv("AnimalsOutcome.csv", header = T)
#logmem1 <- read.csv("LogMem1Outcome.csv", header = T)
cps <- seq(from = -6, to = 2, by = 0.1)
cps <- seq(from = -6, to = 2, by = 0.1)
animals$gender <- factor(animals$gender)
animals$demind <- factor(animals$demind)
animals$int <- as.numeric(as.character(animals$demind)) * animals$age_59
animals$timemax <- animals$timeb4dem - animals_cp
animals$timecp <- ifelse(animals$timemax < 0, 0, animals$timemax)
animals[is.na(animals)] <- ""
library(nlme)
source("C:/Repositories/bios6623-johnsra3/Project3/Code/Functions- Change Points and Bootstrap.R")
setwd("C:/Users/johnsra3/Documents/School/AdvancedData")
#blockr <- read.csv("blockrOutcome.csv", header = T)
animals <- read.csv("AnimalsOutcome.csv", header = T)
cps <- seq(from = -6, to = 2, by = 0.1)
animals$gender <- factor(animals$gender)
animals$demind <- factor(animals$demind)
animals$int <- as.numeric(as.character(animals$demind)) * animals$age_59
#Run the function on the dataset
cp.model <- cp.search_and_fit(id = animals$id, timeb4dem =animals$timeb4dem, age = animals$age_59,
demind = animals$demind, ses = animals$SES, gender = animals$gender,
y = animals$animals, cps = cps, int = animals$int)
animals_cp <- cp.model$cp
animals$timemax <- animals$timeb4dem - animals_cp
animals$timecp <- ifelse(animals$timemax < 0, 0, animals$timemax)
animals[is.na(animals)] <- ""
animals.model <- lme(animals ~ age_59 + demind + age_59*demind + timemax + SES + gender, random = ~1|id,
correlation = corCAR1(form = ~age_59), method = "REML", data = animals)
mmres <- as.data.frame(summary(animals.model)$coeff$fixed)
summary(animals.model)
mean(animals$age_59)
mean(animals$timemax)
library(nlme)
source("C:/Repositories/bios6623-johnsra3/Project3/Code/Functions- Change Points and Bootstrap.R")
setwd("C:/Users/johnsra3/Documents/School/AdvancedData")
#blockr <- read.csv("blockrOutcome.csv", header = T)
animals <- read.csv("AnimalsOutcome.csv", header = T)
#logmem1 <- read.csv("LogMem1Outcome.csv", header = T)
cps <- seq(from = -6, to = 2, by = 0.1)
animals$gender <- factor(animals$gender)
animals$demind <- factor(animals$demind)
animals$int <- as.numeric(as.character(animals$demind)) * animals$age_59
mean(animals$timeb4dem)
mean(animals$age - animals$ageonset)
mean(animals$age - animals$ageonset, na.rm =T)
mean(animals$timeb4dem)
animals$timemax <- animals$timeb4dem - animals_cp
animals_cp <- cp.model$cp
animals$timemax <- animals$timeb4dem + 3.9
mean(animals$timeb4dem)
mean(animals$timemax)
animals$timecp <- ifelse(animals$timemax < 0, 0, animals$timemax)
mean(animals$timecp)
animals.model <- lme(animals ~ age_59 + demind + age_59*demind + timecp + SES + gender, random = ~1|id,
correlation = corCAR1(form = ~age_59), method = "REML", data = animals)
mmres <- as.data.frame(summary(animals.model)$coeff$fixed)
setwd("C:/Repositories/bios6623-johnsra3/Project3/Reports")
write.csv(mmres, "MixedModelResults.csv")
id <- animals$id
timeb4dem <- animals$timeb4dem
age_59 <- animals$age_59
demind <- animals$demind
ses <- animals$SES
gender <- animals$gender
y <- animals$animals
cps <- seq(from = -6, to = 2, by = 0.1)
int <- as.numeric(as.character(animals$demind)) * animals$age_59
dat <- cbind.data.frame(id, timeb4dem, age_59, demind, ses, gender, y, int)
setwd("C:/Repositories/bios6623-johnsra3/Project3/Reports")
mmres <- read.csv("MixedModelResults.csv", header = T)
animals_bs <- read.csv("BootstrapWithAllEstimates.csv", header = T)
animals_bs <- animals_bs[, -1]
colnames(animals_bs) <-c("Changepoint","Estimate of Intercept","Estimate of Change Point",
"Estimate of Gender", "Estimate of SES", "Estimate of Age_59",
"Estimate of Intrxn", "Estimate of Demind",  "Slope1", "Slope2")
bstab <- as.data.frame(matrix(data = NA, nrow = 1, ncol = 4))
colnames(bstab) <- c("Variable", "Change Point (likelihood)", "Change point (bootstrap)",
"Bootstrapped 95% CI")
bstab[1, 1] <- c("Animals")
bstab[1, 2] <- c(-3.9)
bstab[1, 3] <- round(mean(animals_bs[, 1]), 2)
bstab[1, 4] <- paste(paste(round(quantile(animals_bs[, 1], 0.025), 2), ",", sep = ""),
round(quantile(animals_bs[, 1], 0.975), 2))
bstab
setab <- as.data.frame(matrix(data = NA, nrow = 7, ncol = 4))
colnames(setab) <- c("Variable", "Model Estimate", "Bootstrapped Standard Error", "p-value")
setab[1:7, 1] <- colnames(animals_bs)[2:8]
setab[1, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "(Intercept)"], 2)
setab[2, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "timemax"], 2)
setab[3, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "gender2"], 2)
setab[4, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "SES"], 2)
setab[5, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "age_59"], 2)
setab[2, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "timecp"], 2)
setab[3, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "gender2"], 2)
setab[4, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "SES"], 2)
setab[5, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "age_59"], 2)
setab[6, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "age_59:demind1"], 2)
setab[7, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "demind1"], 2)
setab
setab[1, 3] <- round(sd(animals_bs[, 2]), digits = 2)
setab[2, 3] <- round(sd(animals_bs[, 3]), digits = 2)
setab[3, 3] <- round(sd(animals_bs[, 4]), digits = 2)
setab[4, 3] <- round(sd(animals_bs[, 5]), digits = 2)
setab[5, 3] <- round(sd(animals_bs[, 6]), digits = 2)
setab[6, 3] <- round(sd(animals_bs[, 7]), digits = 2)
setab[7, 3] <- round(sd(animals_bs[, 8]), digits = 2)
setab[1, 4] <- round(2*pnorm(-abs(mmres$summary.animals.model..coeff.fixed[mmres$X == "(Intercept)"])/
sd(animals_bs[, 2])), digits = 4)
setab[2, 4] <- round(2*pnorm(-abs(mmres$summary.animals.model..coeff.fixed[mmres$X == "timemax"])/
sd(animals_bs[, 3])), digits = 4)
setab[3, 4] <- round(2*pnorm(-abs(mmres$summary.animals.model..coeff.fixed[mmres$X == "gender2"])/
sd(animals_bs[, 4])), digits = 4)
setab[4, 4] <- round(2*pnorm(-abs(mmres$summary.animals.model..coeff.fixed[mmres$X == "SES"])/
sd(animals_bs[, 5])), digits = 4)
setab[5, 4] <- round(2*pnorm(-abs(mmres$summary.animals.model..coeff.fixed[mmres$X == "age_59"])/
sd(animals_bs[, 6])), digits = 4)
setab[6, 4] <- round(2*pnorm(-abs(mmres$summary.animals.model..coeff.fixed[mmres$X == "age_59:demind1"])/
sd(animals_bs[, 7])), digits = 4)
setab[7, 4] <- round(2*pnorm(-abs(mmres$summary.animals.model..coeff.fixed[mmres$X == "demind1"])/
sd(animals_bs[, 8])), digits = 4)
setab[2, 4] <- round(2*pnorm(-abs(mmres$summary.animals.model..coeff.fixed[mmres$X == "timecp"])/
sd(animals_bs[, 3])), digits = 4)
setab
library(nlme)
source("C:/Repositories/bios6623-johnsra3/Project3/Code/Functions- Change Points and Bootstrap.R")
setwd("C:/Users/johnsra3/Documents/School/AdvancedData")
#blockr <- read.csv("blockrOutcome.csv", header = T)
animals <- read.csv("AnimalsOutcome.csv", header = T)
cps <- seq(from = -6, to = 2, by = 0.1)
animals$gender <- factor(animals$gender)
animals$demind <- factor(animals$demind)
animals$int <- as.numeric(as.character(animals$demind)) * animals$age_59
#Run the function on the dataset
cp.model <- cp.search_and_fit(id = animals$id, timeb4dem =animals$timeb4dem, age = animals$age_59,
demind = animals$demind, ses = animals$SES, gender = animals$gender,
y = animals$animals, cps = cps, int = animals$int)
summary(cp.model$model)
animals_cp <- cp.model$cp
animals$timemax <- animals$timeb4dem - animals_cp
animals$timecp <- ifelse(animals$timemax < 0, 0, animals$timemax)
animals[is.na(animals)] <- ""
animals.model <- lme(animals ~ age_59 + demind + age_59*demind + timecp + SES + gender, random = ~1|id,
correlation = corCAR1(form = ~age_59), method = "REML", data = animals)
summary(animals.model)
mean(animals$timecp)
setwd("C:/Repositories/bios6623-johnsra3/Project3/Reports")
mmres <- read.csv("MixedModelResults.csv", header = T)
View(mmres)
animals_bs <- read.csv("BootstrapWithAllEstimates.csv", header = T)
animals_bs <- animals_bs[, -1]
colnames(animals_bs) <-c("Changepoint","Intercept","Change Point",
"Gender", "SES", "Age_59",
"Interaction", "Dementia",  "Slope1", "Slope2")
bstab <- as.data.frame(matrix(data = NA, nrow = 1, ncol = 4))
colnames(bstab) <- c("Variable", "Change Point (likelihood)", "Change point (bootstrap)",
"Bootstrapped 95% CI")
bstab[1, 1] <- c("Animals")
bstab[1, 2] <- c(-3.9)
bstab[1, 3] <- round(mean(animals_bs[, 1]), 2)
bstab[1, 4] <- paste(paste(round(quantile(animals_bs[, 1], 0.025), 2), ",", sep = ""),
round(quantile(animals_bs[, 1], 0.975), 2))
bstab
write.csv(bstab, "C:/Repositories/bios6623-johnsra3/Project3/Reports/BootstrapSummaryTable.csv")
setab <- as.data.frame(matrix(data = NA, nrow = 7, ncol = 4))
colnames(setab) <- c("Variable", "Model Estimate", "Bootstrapped Standard Error", "p-value")
setab[1:7, 1] <- colnames(animals_bs)[2:8]
setab[1, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "(Intercept)"], 2)
setab[2, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "timecp"], 2)
setab[3, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "gender2"], 2)
setab[4, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "SES"], 2)
setab[5, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "age_59"], 2)
setab[6, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "age_59:demind1"], 2)
setab[7, 2] <- round(mmres$summary.animals.model..coeff.fixed[mmres$X == "demind1"], 2)
setab[1, 3] <- round(sd(animals_bs[, 2]), digits = 2)
setab[2, 3] <- round(sd(animals_bs[, 3]), digits = 2)
setab[3, 3] <- round(sd(animals_bs[, 4]), digits = 2)
setab[4, 3] <- round(sd(animals_bs[, 5]), digits = 2)
setab[5, 3] <- round(sd(animals_bs[, 6]), digits = 2)
setab[6, 3] <- round(sd(animals_bs[, 7]), digits = 2)
setab[7, 3] <- round(sd(animals_bs[, 8]), digits = 2)
setab[1, 4] <- round(2*pnorm(-abs(mmres$summary.animals.model..coeff.fixed[mmres$X == "(Intercept)"])/
sd(animals_bs[, 2])), digits = 4)
setab[2, 4] <- round(2*pnorm(-abs(mmres$summary.animals.model..coeff.fixed[mmres$X == "timecp"])/
sd(animals_bs[, 3])), digits = 4)
setab[3, 4] <- round(2*pnorm(-abs(mmres$summary.animals.model..coeff.fixed[mmres$X == "gender2"])/
sd(animals_bs[, 4])), digits = 4)
setab[4, 4] <- round(2*pnorm(-abs(mmres$summary.animals.model..coeff.fixed[mmres$X == "SES"])/
sd(animals_bs[, 5])), digits = 4)
setab[5, 4] <- round(2*pnorm(-abs(mmres$summary.animals.model..coeff.fixed[mmres$X == "age_59"])/
sd(animals_bs[, 6])), digits = 4)
setab[6, 4] <- round(2*pnorm(-abs(mmres$summary.animals.model..coeff.fixed[mmres$X == "age_59:demind1"])/
sd(animals_bs[, 7])), digits = 4)
setab[7, 4] <- round(2*pnorm(-abs(mmres$summary.animals.model..coeff.fixed[mmres$X == "demind1"])/
sd(animals_bs[, 8])), digits = 4)
setab
setab[c(1, 2, 5), 4] <- "<0.0001"
setab
write.csv(setab, "ResultsTabBootstrappedSEs.csv")
write.csv(setab, "ResultsTabBootstrappedSEs.csv")
sltab <- as.data.frame(matrix(data = NA, nrow = 2, ncol = 3))
sltab[1:2, 1] <- c("Slope before change-point", "Slope after change-point")
sltab[1, 2] <- round(mean(animals_bs$Slope1), digits = 2)
sltab[2, 2] <- round(mean(animals_bs$Slope2), digits = 2)
sltab[1, 3] <- paste(paste(round(mean(animals_bs$Slope1) - 1.96 * sd(animals_bs$Slope1), digits = 2), ",", sep = ""),
round(mean(animals_bs$Slope1) + 1.96 * sd(animals_bs$Slope1), digits = 2))
View(sltab)
sltab[2, 3] <- paste(paste(round(mean(animals_bs$Slope2) - 1.96 * sd(animals_bs$Slope2), digits = 2), ",", sep = ""),
round(mean(animals_bs$Slope2) + 1.96 * sd(animals_bs$Slope2), digits = 2))
View(sltab)
write.csv(sltab, "BootstrapSlopeTables.csv")
