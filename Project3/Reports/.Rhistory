beta0 ~ dnorm(0, 5)
}"
event1.data <- list(t = t, t.cen = t.cen, is.censored = is.censored)
event1.jags <- jags.model(file = textConnection(event1_string),
data = event1.data)
View(event1)
event1$I_sex <- ifelse(event1$sex_cat == "Female", 1, 0)
trt <- event1$I_sex
event1_string <- "model{
for(i in nrow(event1)){
is.censored[i] ~ dinterval(t[i], t.cen[i])
t[i] ~ dexp(lambda[i])
lambda[i] <- exp(beta0 + beta1 * trt)
}
beta0 ~ dnorm(0, 0.1)
beta1 ~ dnorm(0, 0.1)
}"
event1.data <- list(t = t, t.cen = t.cen, is.censored = is.censored, trt = trt)
event1.jags <- jags.model(file = textConnection(event1_string),
data = event1.data)
event1.dat <- list(t = t,
is.censored = is.censored,
t.cen = t.cen,
trt = trt)
event1.jags <- jags.model(file = textConnection(event1_string),
data = event1.data)
event1_string <- "model{
for(i in 1:N){
is.censored[i] ~ dinterval(t[i], t.cen[i])
t[i] ~ dexp(lambda[i])
lambda[i] <- exp(beta0 + beta1 * trt)
}
beta0 ~ dnorm(0, 0.1)
beta1 ~ dnorm(0, 0.1)
}"
event1.dat <- list(t = t,
N = nrow(event1),
is.censored = is.censored,
t.cen = t.cen,
trt = trt)
event1.jags <- jags.model(file = textConnection(event1_string),
data = event1.data)
library(knitr)
library(pscl)
library(MASS)
library(tableone)
pex <- read.csv("//proton/EJCgroupStudentThesesJohnsonR/Data/DataCreated/PExDataCleaned.csv", header = T)
demog <- read.csv("//proton/EJCgroupStudentThesesJohnsonR/Data/DataCreated/DemographicsCleaned.csv", header = T)
hist(pex$ep_length, breaks = 20, main = "Histogram of Lengths of\nClinically Defined Episodes",
xlab = "Length of Episode (days)")
lengthtab <- matrix(data = NA, nrow = 5, ncol = 2)
colnames(lengthtab) <- c("", "")
lengthtab[1:5, 1] <- c("Minimum", "25th percentile", "Median", "75th percentile", "Maximum")
lengthtab[1:5, 2] <- round(fivenum(pex$ep_length), 4)
kable(lengthtab)
hist(pex$lengthbtpex, xlab = "Time between Episodes (days)",
main = "Length of Time Between\nClinically Defined Pulmonary Exacerbations", breaks = 25)
bttab <- matrix(data = NA, nrow = 5, ncol = 2)
colnames(bttab) <- c("", "")
bttab[1:5, 1] <- c("Minimum", "25th percentile", "Median", "75th percentile", "Maximum")
bttab[1:5, 2] <- round(fivenum(pex$lengthbtpex), 4)
kable(bttab)
hist(demog$ConsentAge, xlab = "Consent age (years)", main =
"Consent Age of Study Participants", breaks = 20)
contab <- matrix(data = NA, nrow = 5, ncol = 2)
colnames(contab) <- c("", "")
contab[1:5, 1] <- c("Minimum", "25th percentile", "Median", "75th percentile", "Maximum")
contab[1:5, 2] <- round(fivenum(demog$ConsentAge), 4)
kable(contab)
e <- exp(1)
exp(0.0019 * 11)
exp(-0.0060 * 16)
exp(-0.0036 * 29)
e^-0.00228/(1 + e^-0.00228)
e^-0.00239/(1 + e^-0.00239)
e^-1.6514/(1 + e^-1.6514)
e^-1.6568/(1 + e^-1.6568)
(e^-0.00228*7)/(1 + e^-0.00228*7)
(e^-0.00239*7)/(1 + e^-0.00239*7)
(e^-0.00239*31)/(1 + e^-0.00239*31)
(e^-0.00228*31)/(1 + e^-0.00228*31)
library(rjags)
library(coda)
library(survival)
event1 <- read.csv("Z:/Data/DataCreated/TimeToFirstEvent.csv", header = T)
event1$genotype <- factor(event1$genotype, levels = c("0", "1", "2"))
model_freq <- survreg(Surv(time = timetoevent, event = any_pex) ~ sex_cat + VisitAge + genotype, data = event1,
dist = "exponential")
summary(model_freq)
e <- exp91
e <- exp(1)
e^-2.8420
model_int <- survreg(Surv(time = timetoevent, event = any_pex) ~ 1, data = event1,
dist = "exponential")
summary(model_int)
e^-2.57
summary(model_freq)
e^-0.3212
e^-0.1589
217/(217 + 1161)
-0.00497*11.4984
0.002118 * 0.36438
0.002118 * 17.2675
1.8464 * 0.36438
library(dplyr)
library(ggplot2)
library(gridExtra)
mci <- read.csv("C:/Users/johnsra3/Documents/School/AdvancedData/Project3Data.csv", header = T)
allmissing <- mci[is.na(mci$blockR) == T & is.na(mci$animals) == T & is.na(mci$logmemI) == T & is.na(mci$logmemII) == T, ]
mci <- mci[!rownames(mci) %in% rownames(allmissing), ]
View(mci)
freq <- table(mci$id)
freq <- cbind.data.frame(mci$id, table(mci$id))
freq <- cbind.data.frame(unique(mci$id), table(mci$id))
View(freq)
freq <- table(mci$id)
freq
freq <- as.data.frame(table(mci$id))
mci <- merge(mci, freq, by = "id")
View(freq)
colnames(freq) <- c("id", "numobs")
mci <- merge(mci, freq, by = "id")
blockr <- mci[, c(1, 2, 3, 4, 5, 6, 10, 11)]
animals <- mci[, c(1, 2, 3, 4, 5, 7, 10, 11)]
logmem1 <- mci[, c(1, 2, 3, 4, 5, 8, 10, 11)]
logmem2 <- mci[, c(1, 2, 3, 4, 5, 9, 10, 11)]
#Remove missing obs for each outcome
blockr <- blockr[is.na(blockr$blockR) == F, ]
animals <- animals[is.na(animals$animals) == F, ]
logmem1 <- logmem1[is.na(logmem1$logmemI) == F, ]
logmem2 <- logmem2[is.na(logmem2$logmemII) == F, ]
#Tables of frequencies for each ID
blockr_rows <- as.data.frame(table(blockr$id))
animals_rows <- as.data.frame(table(animals$id))
logmem1_rows <- as.data.frame(table(logmem1$id))
logmem2_rows <- as.data.frame(table(logmem2$id))
colnames(blockr_rows) <- c("id", "num_obs")
colnames(animals_rows) <- c("id", "num_obs")
colnames(logmem1_rows) <- c("id", "num_obs")
colnames(logmem2_rows) <- c("id", "num_obs")
blockr <- merge(blockr, blockr_rows, by = "id")
animals <- merge(animals, animals_rows, by = "id")
logmem1 <- merge(logmem1, logmem1_rows, by = "id")
logmem2 <- merge(logmem2, logmem2_rows, by = "id")
#Only include indivs w/ 3+ visits
blockr <- blockr[blockr$num_obs > 2, ]
animals <- animals[animals$num_obs > 2, ]
logmem1 <- logmem1[logmem1$num_obs > 2, ]
logmem2 <- logmem2[logmem2$num_obs > 2, ]
#=============================================================#
# Explore outcome data
#=============================================================#
summary(blockr$blockR)
hist(blockr$blockR)
summary(animals$animals)
hist(animals$animals)
summary(logmem1$logmemI)
hist(logmem1$logmemI)
summary(logmem2$logmemII)
hist(logmem2$logmemII)
#=============================================================#
# Spaghetti plots- exploration of trajectory
#=============================================================#
#blockr
p1 <-ggplot(data = blockr, aes(x = age, y = blockR, group = id, col = as.factor(demind))) +
geom_line() +
theme_classic() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line.x = element_line(color = "black"),
axis.line.y = element_line(color = "black"),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
legend.direction = "horizontal") +
scale_color_discrete("Developed dementia/MCI") +
scale_x_continuous(name = "Age") +
scale_y_continuous(name = "Block design score") +
ggtitle("BlockR")
#animals
p2 <- ggplot(data = animals, aes(x = age, y = animals, group = id, col = as.factor(demind))) +
geom_line() +
theme_classic() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line.x = element_line(color = "black"),
axis.line.y = element_line(color = "black"),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
legend.direction = "horizontal") +
scale_color_discrete("Developed dementia/MCI") +
scale_x_continuous(name = "Age") +
scale_y_continuous(name = "Animal category fluency score") +
ggtitle("Animals")
#logmem1
p3 <- ggplot(data = logmem1, aes(x = age, y = logmemI, group = id, col = as.factor(demind))) +
geom_line() +
theme_classic() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line.x = element_line(color = "black"),
axis.line.y = element_line(color = "black"),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
legend.direction = "horizontal") +
scale_color_discrete("Developed dementia/MCI") +
scale_x_continuous(name = "Age") +
scale_y_continuous(name = "Logical memory score 1") +
ggtitle("LogMemI")
#logmem2
p4 <- ggplot(data = logmem2, aes(x = age, y = logmemII, group = id, col = as.factor(demind))) +
geom_line() +
theme_classic() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line.x = element_line(color = "black"),
axis.line.y = element_line(color = "black"),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
legend.direction = "horizontal") +
scale_color_discrete("Developed dementia/MCI") +scale_x_continuous(name = "Age") +
scale_y_continuous(name = "Logical memory score 2") +
ggtitle("LogMemII")
grid.arrange(p1, p2, p3, p4, ncol = 2)
#=============================================================#
# Write csvs of outcome data sets
#=============================================================#
setwd("~/School/AdvancedData")
write.csv(blockr, "BlockROutcome.csv")
write.csv(animals, "AnimalsOutcome.csv")
write.csv(logmem1, "LogMem1Outcome.csv")
write.csv(logmem2, "LogMem2Outcome.csv")
library(tableone)
setwd("~/School/AdvancedData")
mci <- read.csv("C:/Users/johnsra3/Documents/School/AdvancedData/Project3Data.csv", header = T)
mci <- mci[order(mci$id), ]
mci <- mci[!duplicated(mci$id), ]
mci <- mci[, -which(colnames(mci) == "cdr")]
View(mci)
library(dplyr)
library(ggplot2)
library(gridExtra)
mci <- read.csv("C:/Users/johnsra3/Documents/School/AdvancedData/Project3Data.csv", header = T)
allmissing <- mci[is.na(mci$blockR) == T & is.na(mci$animals) == T & is.na(mci$logmemI) == T & is.na(mci$logmemII) == T, ]
mci <- mci[!rownames(mci) %in% rownames(allmissing), ]
freq <- as.data.frame(table(mci$id))
colnames(freq) <- c("id", "numobs")
mci <- merge(mci, freq, by = "id")
blockr <- mci[, c(1, 2, 3, 4, 5, 6, 10, 11)]
animals <- mci[, c(1, 2, 3, 4, 5, 7, 10, 11)]
logmem1 <- mci[, c(1, 2, 3, 4, 5, 8, 10, 11)]
logmem2 <- mci[, c(1, 2, 3, 4, 5, 9, 10, 11)]
#Remove missing obs for each outcome
blockr <- blockr[is.na(blockr$blockR) == F, ]
animals <- animals[is.na(animals$animals) == F, ]
logmem1 <- logmem1[is.na(logmem1$logmemI) == F, ]
logmem2 <- logmem2[is.na(logmem2$logmemII) == F, ]
#Tables of frequencies for each ID
blockr_rows <- as.data.frame(table(blockr$id))
animals_rows <- as.data.frame(table(animals$id))
logmem1_rows <- as.data.frame(table(logmem1$id))
logmem2_rows <- as.data.frame(table(logmem2$id))
colnames(blockr_rows) <- c("id", "num_obs")
colnames(animals_rows) <- c("id", "num_obs")
colnames(logmem1_rows) <- c("id", "num_obs")
colnames(logmem2_rows) <- c("id", "num_obs")
blockr <- merge(blockr, blockr_rows, by = "id")
animals <- merge(animals, animals_rows, by = "id")
logmem1 <- merge(logmem1, logmem1_rows, by = "id")
logmem2 <- merge(logmem2, logmem2_rows, by = "id")
#Only include indivs w/ 3+ visits
blockr <- blockr[blockr$num_obs > 2, ]
animals <- animals[animals$num_obs > 2, ]
logmem1 <- logmem1[logmem1$num_obs > 2, ]
logmem2 <- logmem2[logmem2$num_obs > 2, ]
setwd("~/School/AdvancedData")
write.csv(mci, "MCICleaned.csv")
write.csv(blockr, "BlockROutcome.csv")
write.csv(animals, "AnimalsOutcome.csv")
write.csv(logmem1, "LogMem1Outcome.csv")
write.csv(logmem2, "LogMem2Outcome.csv")
library(tableone)
mci <- read.csv("C:/Users/johnsra3/Documents/School/AdvancedData/MCICleaned.csv", header = T)
mci <- mci[order(mci$id), ]
mci <- mci[!duplicated(mci$id), ]
mci <- mci[, -which(colnames(mci) == "cdr")]
View(mci)
mci$gender <- factor(mci$gender, levels = c("1", "2"), labels = c("Male", "Female"))
mci$demind <- factor(mci$demind, levels = c("0", "1"))
library(dplyr)
library(ggplot2)
library(gridExtra)
mci <- read.csv("C:/Users/johnsra3/Documents/School/AdvancedData/Project3Data.csv", header = T)
freq <- as.data.frame(table(mci$id))
colnames(freq) <- c("id", "numobs")
mci <- merge(mci, freq, by = "id")
View(mci)
View(mci)
firstrow <- mci[order(mci$id, descending = T), ]
firstrow <- mci[order(mci$id), ]
View(mci)
firstrow <- firstrow[!duplicated(mci$id), ]
View(mci)
rm(firstrow)
lengthbt <- matrix(data = NA, nrow = nrow(mci), ncol = 2)
lengthbt[1, 2] <- NA
View(mci)
for(i in 2:nrow(mci)){
lengthbt[i, 1] <- mci$id[i]
if(identical(mci$id[i], mci$id[i-1])){
lengthbt[i, 2] <- mci$age[i] - mci$age[i-1]
} else {
lengthbt[i, 2] <- NA
}
}
lengthbt <- as.data.frame(lengthbt)
library(plyr)
mci <- read.csv("C:/Users/johnsra3/Documents/School/AdvancedData/Project3Data.csv", header = T)
freq <- as.data.frame(table(mci$id))
colnames(freq) <- c("id", "numobs")
mci <- merge(mci, freq, by = "id")
test <- ddply(mci, .(id), function(x) x[c(1, nrow(x)), ])
View(test)
View(test)
test <- test[, c(which(colnames(test) == "id"),
which(colnames(test) == "age"))]
View(test)
View(freq)
test <- ddply(mci, .(id), function(x) x[c(1, nrow(x)), ])
View(test)
test <- test[, c(which(colnames(test) == "id"),
which(colnames(test) == "age"))]
test <- spread(test, age)
library(tidyr)
test <- spread(test, age)
test <- spread(test, id, age)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(plyr)
mci <- read.csv("C:/Users/johnsra3/Documents/School/AdvancedData/Project3Data.csv", header = T)
#=============================================================#
# Add number of visits column
#=============================================================#
freq <- as.data.frame(table(mci$id))
colnames(freq) <- c("id", "numobs")
mci <- merge(mci, freq, by = "id")
#=============================================================#
# Length of follow-up column
#=============================================================#
test <- ddply(mci, .(id), function(x) x[c(1, nrow(x)), ])
test <- test[, c(which(colnames(test) == "id"),
library(tidyr)
test$whichvisit <- rep(c(1, 2), times = nrow(test)/2)
test$whichvisit <- rep(c(1, 2), times = nrow(test)/2))
View(test)
rm(test)
test <- ddply(mci, .(id), function(x) x[c(1, nrow(x)), ])
test <- test[, c(which(colnames(test) == "id"),
which(colnames(test) == "age"))]
test$whichvisit <- rep(c(1, 2), times = nrow(test)/2)
View(test)
test_wide <- spread(test, age, whichvisit)
View(test)
test_wide <- spread(test, whichvisit)
test_wide <- spread(test, whichvisit, age)
View(test_wide)
test_wide$followup <- test_wide$`2` - test_wide$`1`
mci <- merge(test_wide, merge, by = "id")
View(test_wide)
View(test_wide)
length(unique(test_wide$id))
length(unique(mci$id))
test_wide$id
View(freq)
View(test_wide)
mci <- merge(test_wide, mci, by = "id")
allmissing <- mci[is.na(mci$blockR) == T & is.na(mci$animals) == T & is.na(mci$logmemI) == T & is.na(mci$logmemII) == T, ]
mci <- mci[!rownames(mci) %in% rownames(allmissing), ]
blockr <- mci[, c(1, 2, 3, 4, 5, 6, 10, 11)]
animals <- mci[, c(1, 2, 3, 4, 5, 7, 10, 11)]
logmem1 <- mci[, c(1, 2, 3, 4, 5, 8, 10, 11)]
logmem2 <- mci[, c(1, 2, 3, 4, 5, 9, 10, 11)]
#Remove missing obs for each outcome
blockr <- blockr[is.na(blockr$blockR) == F, ]
animals <- animals[is.na(animals$animals) == F, ]
logmem1 <- logmem1[is.na(logmem1$logmemI) == F, ]
logmem2 <- logmem2[is.na(logmem2$logmemII) == F, ]
#Tables of frequencies for each ID
blockr_rows <- as.data.frame(table(blockr$id))
animals_rows <- as.data.frame(table(animals$id))
logmem1_rows <- as.data.frame(table(logmem1$id))
logmem2_rows <- as.data.frame(table(logmem2$id))
colnames(blockr_rows) <- c("id", "num_obs")
colnames(animals_rows) <- c("id", "num_obs")
colnames(logmem1_rows) <- c("id", "num_obs")
colnames(logmem2_rows) <- c("id", "num_obs")
blockr <- merge(blockr, blockr_rows, by = "id")
animals <- merge(animals, animals_rows, by = "id")
logmem1 <- merge(logmem1, logmem1_rows, by = "id")
logmem2 <- merge(logmem2, logmem2_rows, by = "id")
#Only include indivs w/ 3+ visits
blockr <- blockr[blockr$num_obs > 2, ]
animals <- animals[animals$num_obs > 2, ]
logmem1 <- logmem1[logmem1$num_obs > 2, ]
logmem2 <- logmem2[logmem2$num_obs > 2, ]
#=============================================================#
# Project 3
# Import, explore, clean data
# Rachel Johnson
#=============================================================#
#=============================================================#
# Import data
#=============================================================#
library(dplyr)
library(ggplot2)
library(gridExtra)
library(plyr)
library(tidyr)
mci <- read.csv("C:/Users/johnsra3/Documents/School/AdvancedData/Project3Data.csv", header = T)
#=============================================================#
# Add number of visits column
#=============================================================#
freq <- as.data.frame(table(mci$id))
colnames(freq) <- c("id", "numobs")
mci <- merge(mci, freq, by = "id")
#=============================================================#
# Length of follow-up column
#=============================================================#
test <- ddply(mci, .(id), function(x) x[c(1, nrow(x)), ])
test <- test[, c(which(colnames(test) == "id"),
which(colnames(test) == "age"))]
test$whichvisit <- rep(c(1, 2), times = nrow(test)/2)
test_wide <- spread(test, whichvisit, age)
test_wide$followup <- test_wide$`2` - test_wide$`1`
mci <- merge(test_wide, mci, by = "id")
#=============================================================#
# Remove missing data rows
#=============================================================#
allmissing <- mci[is.na(mci$blockR) == T & is.na(mci$animals) == T & is.na(mci$logmemI) == T & is.na(mci$logmemII) == T, ]
mci <- mci[!rownames(mci) %in% rownames(allmissing), ]
names(mci)
names(mci)[1:5]
names(mci)[6:10]
names(mci)[11:15]
blockr <- mci[, c(1, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15)]
blockr <- blockr[is.na(blockr$blockR) == F, ]
animals <- animals[is.na(animals$animals) == F, ]
animals <- mci[, c(1, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15)]
logmem1 <- mci[, c(1, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15)]
logmem2 <- mci[, c(1, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15)]
blockr <- blockr[is.na(blockr$blockR) == F, ]
animals <- animals[is.na(animals$animals) == F, ]
logmem1 <- logmem1[is.na(logmem1$logmemI) == F, ]
logmem2 <- logmem2[is.na(logmem2$logmemII) == F, ]
blockr_rows <- as.data.frame(table(blockr$id))
animals_rows <- as.data.frame(table(animals$id))
logmem1_rows <- as.data.frame(table(logmem1$id))
logmem2_rows <- as.data.frame(table(logmem2$id))
colnames(blockr_rows) <- c("id", "num_obs")
colnames(animals_rows) <- c("id", "num_obs")
colnames(logmem1_rows) <- c("id", "num_obs")
colnames(logmem2_rows) <- c("id", "num_obs")
blockr <- merge(blockr, blockr_rows, by = "id")
animals <- merge(animals, animals_rows, by = "id")
logmem1 <- merge(logmem1, logmem1_rows, by = "id")
logmem2 <- merge(logmem2, logmem2_rows, by = "id")
blockr <- blockr[blockr$num_obs > 2, ]
animals <- animals[animals$num_obs > 2, ]
logmem1 <- logmem1[logmem1$num_obs > 2, ]
logmem2 <- logmem2[logmem2$num_obs > 2, ]
setwd("~/School/AdvancedData")
write.csv(mci, "MCICleaned.csv")
write.csv(blockr, "BlockROutcome.csv")
write.csv(animals, "AnimalsOutcome.csv")
write.csv(logmem1, "LogMem1Outcome.csv")
write.csv(logmem2, "LogMem2Outcome.csv")
library(tableone)
mci <- read.csv("C:/Users/johnsra3/Documents/School/AdvancedData/MCICleaned.csv", header = T)
mci <- mci[order(mci$id), ]
mci <- mci[!duplicated(mci$id), ]
mci <- mci[, -which(colnames(mci) == "cdr")]
mci$gender <- factor(mci$gender, levels = c("1", "2"), labels = c("Male", "Female"))
mci$demind <- factor(mci$demind, levels = c("0", "1"))
colnames(mci)
View(mci)
tabvars <- c("numobs", "followup", "gender", "SES", "age", "blockR",
"animals", "logmemI", "logmemII", "ageonsent")
tab1 <- CreateTableOne(vars = tabvars, strata = "demind", data = mci, test = F)
tabvars <- c("numobs", "followup", "gender", "SES", "age", "blockR",
"animals", "logmemI", "logmemII", "ageonset")
tab1 <- CreateTableOne(vars = tabvars, strata = "demind", data = mci, test = F)
tabvars <- c("numobs", "followup", "gender", "SES", "age", "blockR",
"animals", "logmemI", "logmemII")
tab1 <- CreateTableOne(vars = tabvars, strata = "demind", data = mci, test = F)
tab1print <- as.data.frame(print(tab1, showAllLevels = T))
tab1_nostrat <- CreateTableOne(vars = tabvars, data = mci, test = T)
tab1 <- CreateTableOne(vars = tabvars, strata = "demind", data = mci, test = T)
tab1print <- as.data.frame(print(tab1, showAllLevels = T))
tab1 <- CreateTableOne(vars = tabvars, strata = "demind", data = mci, test = F)
tab1print <- as.data.frame(print(tab1, showAllLevels = T))
tab1_nostrat <- CreateTableOne(vars = tabvars, data = mci, test = F)
tab1nostratprint <- as.data.frame(print(tab1_nostrat, showAllLevels = T))
tab <- cbind.data.frame(tab1nostratprint, tab1print)
tab <- tab[, -3]
colnames(tab) <- c("", "Overall", "Did not develop dementia/MCI during study",
"Developed dementia/MCI during study")
setwd("C:/Repositories/bios6623-johnsra3/Project3/Reports")
write.csv(tab, "Table1Demographics.csv")
